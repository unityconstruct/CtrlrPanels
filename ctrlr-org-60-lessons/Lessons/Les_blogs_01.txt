Adres code CTRLR

https://sourceforge.net/p/ctrlrv4/code/HEAD/tree/nightly/Source/


HUMAN FLY
i‚Äôll illustrate this better: here is a method that works, for showing/hiding a modulator with a button, using setVisible()
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-
setVisible3 = function(mod, value)
button = panel:getModulatorByName(‚ÄúLED button‚Äù):getValue()
item = panel:getModulatorByName(‚ÄúLED‚Äù)
if
button == 0 then
item:getComponent():setVisible(false)
else
item:getComponent():setVisible(true)
end
end

[LATER]

i resolved my problem with the ‚ÄòsetValue‚Äô method mentioned above.
the version that works is:
(for switching on/off a led, with a button)

‚Äî
‚Äî Called when a modulator value changes
‚Äî @mod http://ctrlr.org/api/class_ctrlr_modulator.html
‚Äî @value new numeric value of the modulator

toggle_led3 = function(‚Äì[[ CtrlrModulator ‚Äì]] mod, ‚Äì[[ number ‚Äì]] value, ‚Äì[[ number ‚Äì]] source)

led = panel:getModulatorByName(‚ÄúLED‚Äù)

if value == 1 then
led:setValue(1, false)
else
led:setValue(0, false)
end
end

it does not work without ‚Äò,false‚Äô there. i need to look up what that is for. 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
HUMAN FLY:
you write methods in the Lua editor:
get to this via Panel>Lua editor or call up methods on several parameters on the properties panel ‚Äì create/edit new methods using ‚Äòadd‚Äô.

everything seems to be called ‚Äòmodulator‚Äô ‚Äì even groups.

so what is ‚ÄòComponent‚Äô?
ie: getComponent() vs getModulator()


ANSWER: Mr.ToR

 Juce is an object oriented framework. Ctrlr is based on Juce. 
 Components are Juce graphical objects and 
 Modulators are Ctrlr objects which contain graphical objects properly called components. 
 An object is an instantiation of a class. 
 In the case of components, when you add a graphical object in ctrlr, it‚Äôs actually an instance of the component class. That‚Äôs why they‚Äôre called objects. If you want, you can even call them an instance of a juce component class.
 
 [EERDER]

The objects you can add to the panel are called components.
Right-click on the panel and you will get an ‚ÄòAdd component‚Äô dialog.
A component‚Äôs properties are divided into multiple sections such as ‚ÄòModulator‚Äô, ‚ÄòMIDI‚Äô, ‚ÄòComponent generic‚Äô and ‚ÄòComponent‚Äô.
All components have a modulator property but you can only view a ‚Äòmodulator list‚Äô. When you‚Äôre at the ‚Äòmodulator list‚Äô window, click the ‚ÄòView‚Äô menu item and select ‚ÄòSwitch to Tree‚Äô. Now in the tree view you will see the objects you‚Äôve added to the panel, the ones we thought were components are listed as ‚Äòmodulator‚Äô and under those modulators listed are ‚ÄòMIDI‚Äô and ‚ÄòComponent‚Äô üòÄ
WOW What‚Äôs going on??? Nothing is what it seems‚Ä¶ üôÇ

I think the tree is the best place to understand what really is going on.

So it seems that you are actually not adding components to the panel (even though that‚Äôs what the dialog says) but you‚Äôre adding an object called a modulator, which has a group of properties called a ‚Äòcomponent‚Äô, ‚ÄòMIDI‚Äô and also another group of properties called‚Ä¶ a ‚Äòmodulator‚Äô. üôÇ

You can confirm this. 
Add an object to the panel, select it, in it‚Äôs properties dialog look at ‚ÄòModulator‚Äô property group, you will see a property called ‚ÄòLink to what type of MODULATOR property‚Äô click its associated drop-down list and you will see the 3 selection options, which are ‚ÄòModulator‚Äô, ‚ÄòComponent‚Äô, ‚ÄòMIDI Message‚Äô. This also tells me that modulator is a modulator property. üôÇ ‚ÄòComponent‚Äô seems to be a graphical sub-object of a modulator object. In the tree list, it almost seems like you should be able to delete, cut, copy, add or paste a component (or midi) object to a modulator object but it doesn‚Äôt work like that. Maybe in a future version‚Ä¶

So in consideration of all these information i think, the property groups such as component and midi are actually midi object and component object added to a modulator object and all those three objects have their own properties. So in theory, since the only object added to the panel is a modulator and since there is no add modulator function and you can not add a modulator without a component, it might make sense to have a dialog that says ‚Äòadd component‚Äô since it will actually add a modulator object but then add the selected component (together with a midi object) to that modulator object.

Anyways, the next thing i was able to figure out is that the Modulator property group of a modulator object is where you link a Lua code or function to that Modulator object to do different things or behave in different ways.

So what is an expression and a method and what is the difference?
Methods are names of files that hold functions written in lua code. You can see/list these when you open menu item ‚ÄòPanel‚Äô->‚ÄôLua Editor‚Äô
It seems like the convention is to have one function per method and both having the same name. Meaning, if you make function called splitBytes you will have a method called splitBytes and in that method you will have a function called splitBytes. This again seems like having the same mentality as having a modulator parameter of a modulator object but it‚Äôs probably how ctrlr uses lua‚Ä¶  Anyways, these methods can be called from the following three properties of a modulator object:
1.‚ÄôCalled to calculate the MIDI value to send‚Äô,
2.‚ÄôCalled to calculate new modulator value from a MIDI value‚Äô,
3.‚ÄôCalled when the modulator value changes‚Äô
And also methods could be called from 17 properties of the panel (+5 in editor section).

The next thing is expressions. Here is a list of expressions:
http://ctrlr.org/expressions-in-ctrlr-2/ they are little functions. Ctrlr is based on Juce (www.juce.com) and these expressions are a Juce class. They are different from lua code. The juce documentation explains it in the following way:
[A class for dynamically evaluating simple numeric expressions.
This class can parse a simple C-style string expression involving floating point numbers, named symbols and functions. The basic arithmetic operations of +, -, *, / are supported, as well as parentheses, and any alphanumeric identifiers are assumed to be named symbols which will be resolved when the expression is evaluated.]

In ctrlr they are only entered into 3 specific properties of a modulator object:
1.‚ÄôExpression to evaluate when calculating the midi message value from the madulator value‚Äô,
2.‚ÄôExpression to evaluate when calculating the modulator value from the midi message value‚Äô,
3.‚Äù (the third parameter does not have a name and i have no idea what it is, maybe it‚Äôs similar to the third property about methods).

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
HumanFly:

‚ÄìCalled when a button value changes
‚Äìincrement count

function increment2(value)

local count = panel:getModulatorByName(‚Äúcount1_8‚Äù):getModulatorValue()

count = count + 1
return count
end

what is missing? this doesn‚Äôt do anything.

ANSWER goodweather: 

You are not doing anything with the arg ‚Äúvalue‚Äù so you can remove it.
Are you sure count has a value?
Insert under the local count= line a console output as:
console(tostring(count))

Anywhere in a method you can add:
console(tostring(any_variable))

Use tostring() to be sure to convert the variable value to a string because console() accepts only strings.

You can also open the Lua console under Panel. In the bottom part you can type any console() statement to check any variable. The result will be displayed in the upper part.

About console, just apply what I said above, it does what I described‚Ä¶
‚Äì let‚Äôs say that in your code you have iBank = 12
‚Äì if you add a line console(tostring(iBank)) in the code you will see 12 in the console window
‚Äì if your panel is open and that you ran different things then you can open the console window and type a console statement in the bottom part to check the value of any global variable used in the code

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


AAN/UIT goodweather

Build an image with 2 frames (one picture for On then one for Off).
Use a uiImageButton modulator.
Value 0 will display first image, value 1 will display the second image

Start your device
Set your Midi connection with the Midi menu
Open Midi monitor window and enable Input and output monitoring
Save, close and re-open your panel
Switch the button on your device then check the midi monitor
Should display the correct messages with values 0 and 1
Maybe you have 0 but then another value which is preventing the display of the second image

