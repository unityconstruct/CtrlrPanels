<?xml version="1.0" encoding="UTF-8"?>

<panel name="DEMO - Component Transforms and Animation" panelShowDialogs="1"
       panelMessageTime="10000" panelAuthorName="Roman Kubiak" panelAuthorEmail="kubiak.roman@gmail.com"
       panelAuthorUrl="http://ctrlr.org" panelAuthorDesc="A simple example on how to apply AffineTransforms (like rotation and scale) to any component, and a small intro on Timers for use with animations."
       panelVersionMajor="1" panelVersionMinor="0" panelVersionName=""
       panelVendor="" panelDevice="" panelMidiSnapshotAfterLoad="0"
       panelMidiSnapshotAfterProgramChange="0" panelMidiSnapshotDelay="10"
       panelMidiInputChannelDevice="1" panelMidiInputDevice="-- None"
       panelMidiControllerChannelDevice="1" panelMidiControllerDevice="-- None"
       panelMidiOutputChannelDevice="1" panelMidiOutputDevice="-- None"
       panelMidiInputFromHost="0" panelMidiInputChannelHost="1" panelMidiOutputToHost="0"
       panelMidiOutputChannelHost="1" panelMidiThruH2H="0" panelMidiThruH2HChannelize="0"
       panelMidiThruH2D="0" panelMidiThruH2DChannelize="0" panelMidiThruD2D="0"
       panelMidiThruD2DChannelize="0" panelMidiThruD2H="0" panelMidiThruD2HChannelize="0"
       panelMidiRealtimeIgnore="1" panelMidiInputThreadPriority="7"
       panelMidiProgram="No Program" panelMidiBankLsb="0" panelMidiBankMsb="0"
       panelMidiSendProgramChangeOnLoad="0" panelMidiProgramCalloutOnprogramChange="0"
       panelMidiMatchCacheSize="32" luaPanelMidiReceived="" luaPanelLoaded="-- None"
       luaPanelBeforeLoad="" luaPanelSaved="" luaPanelProgramChanged=""
       luaPanelGlobalChanged="-- None" luaPanelMessageHandler="-- None"
       panelFilePath="C:\devel\ctrlrv4\nightly\Panels\DEMO - Component Transforms and Animation.panel"
       panelUID="eabb7e06d268fff7836147fca362f172" panelModulatorListColumns=""
       panelModulatorListCsvDelimiter="," panelModulatorListXmlRoot="ctrlrModulatorList"
       panelModulatorListXmlModulator="ctrlrModulator" panelModulatorListSortOption="1"
       panelGlobalVariables="" panelResources="" panelPropertyDisplayIDs="0"
       ctrlrMenuItemBackgroundColour="ffffffff" ctrlrMenuItemTextColour="ff000000"
       ctrlrMenuItemHighlightedTextColour="ffffffff" ctrlrMenuItemHighlightColour="ff4364ff"
       ctrlrMenuItemFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1" ctrlrMenuItemSeparatorColour="33000000"
       ctrlrMenuItemHeaderColour="ff000000" ctrlrMenuBarBackgroundColour1="fff7f7f7"
       ctrlrMenuBarBackgroundColour2="ffcccccc" ctrlrMenuBarTextColour="ff000000"
       ctrlrMenuBarHighlightedTextColour="ffffffff" ctrlrMenuBarHighlightColour="ff4364ff"
       ctrlrMenuBarFont="&lt;Sans-Serif&gt;;13;0;0;0;0;1" panelMidiControllerChannel="1"
       panelMidiInputChannel="1" panelMidiOutputChannel="1" panelMidiVstInput="0"
       panelMidiThru="0" panelMidiBank="No Bank" panelIndex="0" uiPanelToolbarState="TB:1 36 2 32 -1 17 14 33 -1 11 12 13 -1 3 4 -1 34 35 30 31 29 -1 27 -3 1"
       panelCtrlrRevision="1159">
  <uiWindowManager>
    <uiChildWindow uiChildWindowName="LuaMethodEditor" uiChildWindowState="1004 277 891 650"
                   uiChildWindowVisible="0">
      <uiChildWindowContentState luaMethodEditor="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&#13;&#10;&lt;OPEN id=&quot;LUA Method&quot; scrollPos=&quot;0&quot;&gt;&#13;&#10;  &lt;SELECTED id=&quot;/LUA Method/blah&quot;/&gt;&#13;&#10;&lt;/OPEN&gt;&#13;&#10;;d4d9cbe7b4b509414b3dd8db57ce59e8:55928123934daba5ee3f6bf83114073a:66097f1efb7f904831994f0d7c95136e"/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LuaConsole" uiChildWindowState="8 637 600 322"
                   uiChildWindowVisible="0">
      <uiChildWindowContentState/>
    </uiChildWindow>
  </uiWindowManager>
  <midiLibrary luaMidiLibrarySend="-- None" luaMidiLibraryRequest="-- None"
               luaMidiLibraryProcess="-- None" luaMidiLibraryConfirm="-- None"
               luaMidiLibraryUndefined="-- None" midiLibraryCustomRequests="">
    <midiLibrarySnapshots name="Snapshots"/>
    <midiLibraryFirmware midiLibraryCanGetItem="1" midiLibraryCanSendItem="1"/>
    <midiLibraryEditBuffer midiLibraryCanGetItem="1" midiLibraryCanSendItem="1"/>
  </midiLibrary>
  <luaManager>
    <luaManagerMethods>
      <luaMethod luaMethodName="toggleRotate" luaMethodCode="&#13;&#10;--&#13;&#10;-- Called when a modulator value changes&#13;&#10;--&#13;&#10;&#13;&#10;toggleRotate = function(modulator, newValue)&#13;&#10;&#13;&#10;&#9;timer:setCallback(12, rotateTimerCallback)&#13;&#10;&#13;&#10;&#9;rotationAngle = 0.0&#13;&#10;&#13;&#10;&#9;if newValue == 1 then&#13;&#10;&#9;&#9;console (&quot;start timer&quot;)&#13;&#10;&#9;&#9;timer:startTimer (12, 25)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;console (&quot;stop timer&quot;)&#13;&#10;&#9;&#9;timer:stopTimer (12)&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;end"
                 luaMethodLinkedProperty="" luaMethodSource="0" uuid="d4d9cbe7b4b509414b3dd8db57ce59e8"
                 luaMethodValid="1"/>
      <luaMethod luaMethodName="rotateTimerCallback" luaMethodCode="function rotateTimerCallback (timerId)&#13;&#10;&#13;&#10;&#9;if rotationAngle == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;rotationAngle = rotationAngle + 0.01&#13;&#10;&#13;&#10;&#9;c = panel:getComponent(&quot;label-target&quot;)&#13;&#10;&#9;s = panel:getModulatorByName(&quot;slider-scale&quot;)&#13;&#10;&#13;&#10;&#9;if s ~= nil then&#13;&#10;&#9;&#9;scaleFactor = s:getModulatorValue()/100&#13;&#10;&#9;else&#13;&#10;&#9;&#9;scaleFactor = 1.0&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if c ~= nil then&#13;&#10;&#9;&#9;c:setComponentText (string.format (&quot;Rotation radians: %.2f Scale factor: %.2f&quot;,rotationAngle, scaleFactor))&#13;&#10;&#9;&#9;transform = AffineTransform.rotation(rotationAngle, c:getX()+c:getWidth()/2, c:getY()+c:getHeight()/2):scaled (scaleFactor, scaleFactor, c:getX()+c:getWidth()/2, c:getY()+c:getHeight()/2)&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;if transform:isSingularity() ~= true then&#13;&#10;&#9;&#9;&#9;c:setTransform (transform)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#10;end"
                 luaMethodLinkedProperty="" luaMethodSource="0" uuid="55928123934daba5ee3f6bf83114073a"
                 luaMethodValid="1"/>
      <luaMethod luaMethodName="scale" luaMethodCode="&#13;&#10;--&#13;&#10;-- Called when a modulator value changes&#13;&#10;--&#13;&#10;&#13;&#10;scale = function(modulator, newValue)&#13;&#10;&#13;&#10;&#9;if rotationAngle == nil or newValue == nil then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;c = panel:getComponent(&quot;label-target&quot;)&#13;&#10;&#13;&#10;&#9;if c ~= nil then&#13;&#10;&#13;&#10;&#9;&#9;transform = AffineTransform.rotation(rotationAngle, c:getX()+c:getWidth()/2, c:getY()+c:getHeight()/2):scaled (newValue/100, newValue/100, c:getX()+c:getWidth()/2, c:getY()+c:getHeight()/2)&#13;&#10;&#13;&#10;&#9;&#9;if transform:isSingularity() ~= true then&#13;&#10;&#9;&#9;&#9;c:setTransform (transform)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end"
                 luaMethodLinkedProperty="" luaMethodSource="0" uuid="66097f1efb7f904831994f0d7c95136e"
                 luaMethodValid="1"/>
      <luaMethod luaMethodName="blah" luaMethodCode="--&#13;-- Called when a modulator value changes&#13;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#13;-- @value    new numeric value of the modulator&#13;--&#13;blah = function(mod, value)&#13;&#10;&#9;console (&quot;blah&quot;)&#13;end"
                 luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                 uuid="f4100fba3238f3f0f61be11e01bf16c2" luaMethodValid="1"/>
    </luaManagerMethods>
  </luaManager>
  <uiPanelEditor uiPanelCanvasRectangle="0 0 698 449" uiPanelSnapSize="8" uiPanelBackgroundColour="0xffffffff"
                 uiPanelBackgroundColour1="0xffffffff" uiPanelBackgroundColour2="0xffffffff"
                 uiPanelBackgroundGradientType="1" uiPanelImageResource="" uiPanelEditMode="0"
                 uiPanelViewPortSize="975" uiPanelPropertiesSize="594" uiPanelLock="0"
                 uiPanelDisabledOnEdit="0" uiPanelWidth="400" uiPanelHeight="400"
                 name="DEMO - Component Transforms and Animation" uiPanelImageAlpha="255"
                 uiPanelImageLayout="64" uiPanelSnapActive="1" uiPanelPropertiesOnRight="0"
                 luaPanelPaintBackground="" luaPanelResized="" uiPanelInvisibleComponentAlpha="0.5"
                 uiPanelToolbarPosition="8 8 800 40" uiPanelRotation="0">
    <uiPanelCanvasLayer uiPanelCanvasLayerName="New layer" uiPanelCanvasLayerUid="8f809ff824000000505ea204b0e473b4"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="1"
                        uiPanelCanvasLayerIndex="0"/>
  </uiPanelEditor>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="label-target" modulatorVstExported="0" modulatorValue="-1">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="" componentSnapSize="8"
               componentIsLocked="0" componentDisabled="0" componentRadioGroupId="0"
               componentRadioGroupNotifyMidi="1" componentVisibility="1" componentEffect="Shadow"
               componentEffectRadius="7.4" componentEffectColour="ffff0000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiLabelBgColour="7" uiLabelTextColour="0xff000000"
               uiLabelOutline="0" uiLabelOutlineColour="0x00000000" uiLabelJustification="centred"
               uiLabelFitFont="0" uiLabelFont="Courier New;28;0;0;0;0;1" uiLabelText="Rotation radians: 2.37 Scale factor: 0.75"
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentRectangle="17 160 568 48" componentSnapSizeAllow="0"
               componentEffectAlpha="0.41" uiType="uiLabel" componentLayerUid="8f809ff824000000505ea204b0e473b4"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="0" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorExcludeFromSnapshot="0"
             modulatorValueExpression="modulatorValue" modulatorValueExpressionReverse="midiValue"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomIndexGroup="0" luaModulatorValueChange="toggleRotate"
             name="toggle-rotate" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="5" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula="F0 00 F7"/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentSnapSize="8"
               componentIsLocked="0" componentDisabled="0" componentRadioGroupId="0"
               componentRadioGroupNotifyMidi="1" componentVisibility="1" componentEffect="0"
               componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiButtonTextColourOn="0xff000000"
               uiToggleButtonText="Rotate" uiButtonTrueValue="1" uiButtonFalseValue="0"
               uiButtonColourOff="0xff0000ff" componentRectangle="8 8 80 32"
               componentSnapSizeAllow="0" componentEffectAlpha="0" uiType="uiToggleButton"
               componentLayerUid="8f809ff824000000505ea204b0e473b4"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="0"
             name="modulator-1" modulatorVstExported="0" modulatorValue="-1">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="" componentSnapSize="8"
               componentIsLocked="0" componentDisabled="0" componentRadioGroupId="0"
               componentRadioGroupNotifyMidi="1" componentVisibility="1" componentEffect="0"
               componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1"
               uiLabelText="&lt;- Have a look at the LUA method linked to the buttons changed event"
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentRectangle="72 8 408 32" componentSnapSizeAllow="0" componentEffectAlpha="0"
               uiType="uiLabel" componentLayerUid="8f809ff824000000505ea204b0e473b4"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="150" vstIndex="1" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorExcludeFromSnapshot="0"
             modulatorValueExpression="modulatorValue" modulatorValueExpressionReverse="midiValue"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="0" modulatorBaseValue="0" modulatorCustomIndex="0"
             modulatorCustomIndexGroup="0" luaModulatorValueChange="scale"
             name="slider-scale" modulatorMin="1" modulatorValue="75">
    <midi midiMessageType="5" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="1" midiMessageMultiList=""
          midiMessageSysExFormula="F0 00 F7"/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1" componentVisibleName="Scale the component"
               componentMouseCursor="2" componentGroupName="" componentSnapSize="8"
               componentIsLocked="0" componentDisabled="0" componentRadioGroupId="0"
               componentRadioGroupNotifyMidi="1" componentVisibility="1" componentEffect="0"
               componentEffectRadius="0" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiSliderStyle="LinearHorizontal"
               uiSliderMin="1" uiSliderMax="150" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="0xff000000" uiSliderValueBgColour="ffffff"
               uiSliderRotaryOutlineColour="0xff0000ff" uiSliderRotaryFillColour="0xff0000ff"
               uiSliderThumbColour="0xffff0000" uiSliderValueHighlightColour="0xff0000ff"
               uiSliderValueOutlineColour="ffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="0xff0000ff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentRectangle="8 40 576 48" componentSnapSizeAllow="0"
               componentEffectAlpha="0" uiType="uiSlider" componentLayerUid="8f809ff824000000505ea204b0e473b4"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="" componentSnapSize="8"
               componentIsLocked="0" componentDisabled="0" componentRadioGroupId="0"
               componentRadioGroupNotifyMidi="1" componentVisibility="1" componentEffect="0"
               componentEffectRadius="7.4000001" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="Courier New;28;0;0;0;0;1"
               uiLabelText="The above label has a DropShadow effect apply, look at it's properties. The arrow has a Glow effect applied."
               uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentRectangle="3 352 576 24" componentSnapSizeAllow="0"
               componentEffectAlpha="0" uiType="uiLabel" componentLayerUid="8f809ff824000000505ea204b0e473b4"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="modulator-3" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1" componentVisibleName="modulator-3"
               componentMouseCursor="2" componentGroupName="" componentSnapSize="8"
               componentIsLocked="0" componentDisabled="0" componentRadioGroupId="0"
               componentRadioGroupNotifyMidi="1" componentVisibility="1" componentEffect="1"
               componentEffectRadius="7.4000001" componentEffectColour="84ff0000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentBubbleRoundAngle="10" componentBubbleBackgroundColour1="0x9cffffff"
               componentBubbleBackgroundColour2="0xbab9b9b9" componentBubbleBackgroundGradientType="1"
               componentBubbleValueColour="0xff000000" componentBubbleValueFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1"
               componentBubbleValueJustification="centred" componentBubbleNameColour="0xff000000"
               componentBubbleNameFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1" componentBubbleNameJustification="centred"
               componentValueDecimalPlaces="0" uiArrowColour="ffff0000" componentRectangle="136 200 128 152"
               uiArrowLineThickness="20" uiArrowHeadWidth="59" uiArrowHeadHeight="32"
               uiArrowOrientation="0" uiArrowRotation="28" uiArrowStokeThickness="6"
               componentSnapSizeAllow="0" componentEffectAlpha="0" uiType="uiArrow"
               componentLayerUid="8f809ff824000000505ea204b0e473b4" uiLabelFont="Courier New;28;0;0;0;0;1"/>
  </modulator>
</panel>
